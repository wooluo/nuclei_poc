name: üîÑ Sync & Alert

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
  schedule:
    - cron: '*/5 * * * *'    # every 5 minutes
  workflow_dispatch:        # manual trigger

permissions:
  contents: write           # grant GITHUB_TOKEN push rights

jobs:
  sync-and-alert:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout your fork (full history + credentials)
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Configure Git so merge commits have valid author
      - name: Configure Git user
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      # 3) Add upstream remote & fetch its main branch
      - name: Add & fetch upstream
        run: |
          git remote add upstream https://github.com/projectdiscovery/nuclei-templates.git || true
          git fetch upstream main

      # 4) Detect new or modified templates upstream (before merge)
      - name: Detect upstream template changes
        id: detect
        run: |
          git diff --name-status origin/main..upstream/main \
            | awk '($1=="A" || $1=="M") && $2 ~ /\.yaml$/ {print $1 ":" $2}' \
            > changes.txt || true
          echo "count=$(wc -l < changes.txt)" >> $GITHUB_OUTPUT

      - name: Merge & push upstream changes (ignore .github)
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git fetch upstream main

          # Cho ph√©p merge c√≥ conflict m√† kh√¥ng d·ª´ng job
          set +e
          git merge --no-commit --no-ff upstream/main
          set -e

          # ‚úÖ Gi·∫£i quy·∫øt m·ªçi conflict d∆∞·ªõi .github b·∫±ng c√°ch gi·ªØ "ours"
          # (d√πng checkout ƒë·ªÉ ch·ªçn ours, sau ƒë√≥ add -A ƒë·ªÉ c·∫£ th√™m/s·ª≠a/x√≥a ƒë·ªÅu ƒë∆∞·ª£c stage)
          git checkout --ours -- .github || true
          git add -A .github

          # ‚ùå N·∫øu c√≤n conflict ·ªü ngo√†i .github, abort ƒë·ªÉ x·ª≠ l√Ω th·ªß c√¥ng
          if ! git diff --name-only --diff-filter=U --quiet -- . ':!.github/**'; then
            echo "‚ùå C√≤n conflicts ngo√†i .github. H·ªßy merge."
            git merge --abort
            exit 1
          fi

          # (T√πy ch·ªçn) ƒê·∫£m b·∫£o kh√¥ng v√¥ t√¨nh l·∫•y thay ƒë·ªïi .github t·ª´ upstream
          git restore --source=HEAD --staged --worktree -- .github/

          # Ch·ªâ commit khi th·ª±c s·ª± c√≥ thay ƒë·ªïi
          if git diff --quiet --staged; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Merge upstream without .github changes"
          git push origin HEAD:main

      # 6) Set up Python & install notifier dependencies
      - name: Set up Python & deps
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Python packages
        run: pip install pyyaml requests

      # 7) Notify Discord for each added or modified template
      - name: Notify Discord
        if: steps.detect.outputs.count != '0'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_WEBHOOK_FLYSEC: ${{ secrets.DISCORD_WEBHOOK_FLYSEC }}
          SHODAN_KEY: ${{ secrets.SHODAN_KEY }}
        run: |
          while read -r change; do
            status=${change%%:*}
            tpl=${change#*:}
            # skip if file missing for any reason
            [ -f "$tpl" ] || { echo "Skipping missing $tpl"; continue; }
            python .github/scripts/notify.py "$status" "$tpl"
          done < changes.txt